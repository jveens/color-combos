{"version":3,"sources":["logo.svg","components/ColorForm.js","components/ColorCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ColorForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clearForm","setState","name","foreground","background","updateName","event","target","value","updateForeground","updateBackground","updateState","piece","blank","state","_this2","_this$state","react_default","a","createElement","onSubmit","props","addColor","className","htmlFor","type","id","onChange","required","pattern","Component","ColorCard","style","backgroundColor","concat","color","App","preventDefault","newColor","colors","toConsumableArray","push","map","index","components_ColorCard","key","components_ColorForm","length","renderColors","renderPlaceholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7ece8c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass ColorForm extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\tforeground: '',\n\t\t\tbackground: '',\n\t\t};\n\t}\n\n\tclearForm = () => {\n\t\tthis.setState({\n\t\t\tname: '',\n\t\t\tforeground: '',\n\t\t\tbackground: '',\n\t\t});\n\t}\n\n\tupdateName = (event) => {\n\t\tthis.setState({\n\t\t\tname: event.target.value\n\t\t});\n\t}\n\n\tupdateForeground = (event) => {\n\t\tthis.setState({\n\t\t\tforeground: event.target.value\n\t\t});\n\t}\n\n\tupdateBackground = (event) => {\n\t\tthis.setState({\n\t\t\tbackground: event.target.value\n\t\t});\n\t}\n\n\tupdateState = (event, piece) => {\n\t\tconst blank = {};\n\n\t\tblank[piece] = event.target.value;\n\n\t\tthis.setState(blank);\n\t}\n\n\trender() {\n\t\tconst { name, foreground, background } = this.state;\n\t\treturn (\n\t\t\t<form onSubmit={ (event) => { this.props.addColor(event, name, foreground, background ); this.clearForm() }}>\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<label htmlFor=\"name\">Name:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tvalue={ this.state.name }\n\t\t\t\t\t\tonChange={ (event) => this.updateState(event, 'name') }\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<label htmlFor=\"hex\">Foreground: </label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tid=\"hex\" \n\t\t\t\t\t\tpattern=\"[a-fA-F\\d]+\"\n\t\t\t\t\t\tname=\"hex\" \n\t\t\t\t\t\tvalue={ this.state.foreground } \n\t\t\t\t\t\tonChange={ (event) => this.updateState(event, 'foreground') }\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t<label htmlFor=\"hex\">Background: </label>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tid=\"hex\" \n\t\t\t\t\t\tpattern=\"[a-fA-F\\d]+\"\n\t\t\t\t\t\tname=\"hex\" \n\t\t\t\t\t\tvalue={ this.state.background } \n\t\t\t\t\t\tonChange={ (event) => this.updateState(event, 'background') }\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<input type=\"submit\" value=\"Add this color combo\"/>\n\t\t\t</form>\t\n\t\t);\n\t}\n}\n\nexport default ColorForm;","import React from 'react';\n\nfunction ColorCard(props) {\n\tconst { name, background, foreground } = props;\n\n\treturn (\n\t\t<div style={{ backgroundColor: `#${background}`, color: `#${foreground}` }} className=\"color-card\">\n          <h2>{ name }</h2>\n          <h3>#{ foreground }</h3>\n          <h3>#{ background }</h3>\n        </div>\n\t);\n}\n\nexport default ColorCard;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ColorForm from './components/ColorForm';\nimport ColorCard from './components/ColorCard';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      colors: []\n    }\n  }\n\n  addColor = (event, name, foreground, background) => {\n\n    event.preventDefault();\n\n    const newColor = {\n      name,\n      foreground,\n      background\n    };\n\n    const colors = [ ...this.state.colors ];\n\n    colors.push(newColor);\n\n    this.setState({\n      colors\n    });\n\n  }\n\n  renderColors() {\n    const colors = this.state.colors.map((color, index) => {\n      return (\n        <ColorCard\n          key={ index }\n          name={ color.name }\n          background={ color.background }\n          foreground={ color.foreground }\n        />\n      );\n    })\n\n    return colors;\n  }\n\n  renderPlaceholder() {\n    return <p>Add a color using the form above</p>\n  }\n\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <header className=\"App-header\">\n          <h1>Color Creator</h1>\n          <ColorForm addColor={ this.addColor }/>\n        </header>\n        <main>\n          {\n            this.state.colors.length\n            ? this.renderColors()\n            : this.renderPlaceholder()\n          }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}